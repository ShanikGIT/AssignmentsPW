Time and Space complexity Assignment
Question 1. Analyze the time complexity of the following Java code and suggest a way to improve it:
                 int sum = 0;
                 for(int i = 1; i <= n; i++) {
                 for(int j = 1; j <= i; j++) {
                 sum++;
                 }
                 }
Solution :
The time complexity of this code is O(n^2) as it uses nested loops, where the outer loop runs n times and the inner loop runs i times where it varies from 1 to n.
The total number of operations performed can be calculated by summing the total number of operations in each iteration of the outer loop. The inner loop will run i times on the i-th iteration of the outer loop. So the number of operations is (1+2+3+...+n) which is n(n+1)/2, which is O(n^2).
One way to improve the time complexity of this code is to use a mathematical formula to find the sum instead of using nested loops.


Question 2: Find the value of T(2) for the recurrence relation T(n) = 3T(n-1) + 12n,
 given that T(0) = 5.
Solution : given T(n) = 3T(n-1) + 12n
Substituting the values in the relation:
T(1) = 3T(0) + 12
=> T(1) = 15 + 12 = 27
T(2) = 3T(1) + 12 * 2
=>T(2) = 3 * 27 + 24 = 81 + 24
Hence T(2) = 105.


Question 3: Given a recurrence relation, solve it using a substitution method. Relation : T(n) = T(n - 1) + c.
Solution: Let the solution be T(n) = O(n), now let’s prove this using the induction method.
For that to happen T(n) <= cn where c is some constant.
T(n) = T(n - 1) + c
T(n - 1) = T(n - 2) + c
T(n - 2) = T(n - 3) + c
|
|
T(2) = T(1) + c
—------------------------ Adding all above equations
T(n) = T(1) + cn
Let us assume T(1) to be a constant value.
T(n) = k + cn
Therefore, T(n) <= cn
Hence we can conclude T(n) = O(n).


Question 4: Given a recurrence relation:
T(n) = 16T(n/4) + n2logn
Find the time complexity of this relation using the master theorem.
Solution: From the given recurrence relation we can obtain the value of different parameter such as a,b,p,and k.
The relation : T(n) = 16T(n/4)+ n2logn
Here,a=16
b=4
k=2
p=1
bk = 42 = 16
Here a=bk
Also p>-1
Hence T(n)=θ(nlogab*logp+1n)
Therefore T(n) = θ(nlog164*log1+1n)=θ(n1/2log2n)


1D Array
1. WAP to print the sum of all the elements present on even indexes in the given array.
int sum=0;
        int a[] = {1,2,3,4,5,6};
        for(int i= 0;i<a.length;i++)
        {
           if(i%2==0)
           {
           sum += a[i];
           }
        }
       
        System.out.println(sum);


2. WAP to traverse over the elements of the array {1,2,3,4,5,6,7,8} using for each loop and print all even elements.


int a[] = {1,2,3,4,5,6,7,8};
        for(int X:a)
        {
           if(X%2==0)
           {
          System.out.println(X);
           }
        }


3. WAP to calculate the maximum element in the array {10, 7, -5, 8, 9, 0, -4} using standard library methods for calculating the maximum element.


int[] arr = { 10, 7, -5, 8, 9, 0, -4 };
        int max = Integer.MIN_VALUE;
        for (int val : arr) {
            max = Math.max(max, val);
        }
        System.out.print("Largest in given array is " + max);


4. WAP to find out the second largest element in the input array {34,21,54,65,43}.
int[] a = { 34, 21, 54, 65, 43 };
        int max1 = Integer.MIN_VALUE;
        int max2 = Integer.MIN_VALUE;
        for(int i=0;i<a.length;i++)
        {
            max1 = Math.max(max1, a[i]);
        }
        //System.out.println(max1);
        for(int i=0;i<a.length;i++)
        {
             if(a[i]!=max1)
             {
                max2 = Math.max(max2, a[i]);
             }
        }
        if(max2==Integer.MIN_VALUE)
        {
                System.out.println("No");
        }
        else{
        System.out.println(max2);
        }


2D Array
Q1: Take m and n input from the user and m * n integer inputs from user and print the following:


number of positive numbers
number of negative numbers
number of odd numbers
number of even numbers
number of 0.
Scanner scan = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int m = scan.nextInt();
        System.out.print("Enter the number of columns: ");
        int n = scan.nextInt();
        int arr[][] = new int[m][n];
        System.out.println("Enter the Elements=\n");
        for(int i=0;i<arr.length;i++)
        {
             for(int j = 0;j<arr.length;j++)
             {
                arr[i][j] = scan.nextInt();
             }
        }
        int positive = 0 , negative = 0 , zero = 0 , odd = 0 , even = 0;
        for( int i = 0 ; i < m  ; i++){
            for( int j = 0 ; j < n  ; j++){
                if(arr[i][j] > 0)positive++;
                if(arr[i][j] < 0)negative++;
                if(arr[i][j] == 0)zero++;
                if((arr[i][j] % 2) == 0)even++;
                if((arr[i][j] % 2) != 0)odd++;
            }
        }
        System.out.println("Number of positives = " + positive);
        System.out.println("Number of negatives = " + negative);
        System.out.println("Number of odds = " + odd);
        System.out.println("Number of evens = " + even);
        System.out.println("Number of zeroes = " + zero);


Q2: write a program to print the elements above the secondary diagonal in a user inputted square matrix.


Scanner scan = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int m = scan.nextInt();
        System.out.print("Enter the number of columns: ");
        int n = scan.nextInt();
        int arr[][] = new int[m][n];
        System.out.println("Enter the Elements=\n");
        for(int i=0;i<arr.length;i++)
        {
             for(int j = 0;j<arr.length;j++)
             {
                arr[i][j] = scan.nextInt();
             }
        }
        for(var X:arr)
        System.out.println(Arrays.toString(X));
        for(int i=0;i<arr.length;i++)
        {
           for(int j =0;j<arr.length;j++)
           {
              if(i+j<2)
              {
                System.out.println(arr[i][j]);
              }
           }
        }


Q3: write a program to print the elements of both the diagonals in a user inputted
Square matrix in any order.
Scanner scan = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int m = scan.nextInt();
        System.out.print("Enter the number of columns: ");
        int n = scan.nextInt();
        int arr[][] = new int[m][n];
        System.out.println("Enter the Elements=\n");
        for(int i=0;i<arr.length;i++)
        {
             for(int j = 0;j<arr.length;j++)
             {
                arr[i][j] = scan.nextInt();
             }
        }
        for(var X:arr)
        System.out.println(Arrays.toString(X));
        for(int i=0;i<arr.length;i++)
        {
           for(int j =0;j<arr.length;j++)
           {
              if(i+j==n-1||i==j)
              {
                System.out.println(arr[i][j]);
              }
           }
        }


Q4: Write a java program to find the largest element of a given 2D array of integers.
int largest = Integer.MIN_VALUE;
        Scanner scan = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int m = scan.nextInt();
        System.out.print("Enter the number of columns: ");
        int n = scan.nextInt();
        int arr[][] = new int[m][n];
        System.out.println("Enter the Elements=\n");
        for(int i=0;i<arr.length;i++)
        {
             for(int j = 0;j<arr.length;j++)
             {
                arr[i][j] = scan.nextInt();
             }
        }
       
   
        for(int i=0;i<arr.length;i++)
        {
           for(int j =0;j<arr.length;j++)
           {
              largest = Math.max(largest,arr[i][j]);
           }
        }
        System.out.println(largest);