Encapsulation Assignment
1. What is Encapsulation in Java? Why is it called Data hiding?
Ans.The process of binding data and corresponding methods (behavior) together into a single unit is called encapsulation in Java.In other words, encapsulation is a programming technique that binds the class members  (variables and methods) together and prevents them from being
accessed by other classes thereby we can keep variables and methods safe from outside interference and misuse. If a field is declared private in the class then it cannot be accessed by anyone outside the class and hides the fields within the class. Therefore, Encapsulation is also called data hiding.


2. What are the important features of Encapsulation?
Ans.Encapsulation is a key concept in object-oriented programming (OOP) that involves combining data and methods within a single unit known as a class. Here are some important
features of encapsulation:
Data Hiding: Encapsulation hides the internal details of an object from the outside world. This
means that the data stored within an object can only be accessed through the methods provided by that object. This helps to prevent accidental modification of data and makes the Code more robust.
Abstraction: Encapsulation allows us to focus on the essential features of an object, while hiding the implementation details. This is achieved by defining public methods that provide a simple and consistent interface for interacting with the object.
Access Control: Encapsulation allows us to control the access to the data and methods of
an object. We can specify which methods and data members are public, private, or protected. Private data and methods can only be accessed from within the class, while protected data and
methods can be accessed from within the class and its subclasses.
Data Integrity: Encapsulation ensures that the data stored within an object is consistent and valid. This is achieved by enforcing constraints on the data through methods, which prevents
the data from being modified in an inconsistent or incorrect manner.
Modularity: Encapsulation allows us to create modular code, which makes it easier to manage and maintain complex systems. By encapsulating related data and methods within a single class, we can create a self-contained unit that can be reused and extended in different parts of the code.


3. What are getter and setter methods in Java Explain with an example
Ans.Getter and setter methods, also known as accessor and mutator methods, are used in Java to access and modify the private data members of a class, respectively. They provide a layer of abstraction that allows us to control the access to the data and enforce constraints on the data as needed. Here's an example to illustrate how getter and setter methods work:


public class Person {
private String name;
private int age;
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public int getAge() {
return age;
}
public void setAge(int age) {
if (age > 0 && age < 120) {
this.age = age;
} else {
System.out.println("Invalid age");
}
}
}


4. What is the use of this keyword explain with an example
Ans. ‘this’ keyword refers to the current object or instance of a class. It is used to
differentiate between instance variables and parameters or local variables that
have the same name, and to pass the current object as a parameter to other
methods or constructors. Here's an example to illustrate the use of the this
Keyword:


public class Person {
private String name;
private int age;
public Person(String name, int age) {
this.name = name;
this.age = age;
}
public void printDetails() {
System.out.println("Name: " + this.name);
System.out.println("Age: " + this.age);
}
public void changeName(String name) {
this.name = name;
}
public void changeAge(int age) {
this.age = age;
}
public void callOtherMethod() {
// Pass the current object as a parameter to another method
otherMethod(this);
}
private void otherMethod(Person p) {
// Do something with the Person object passed as a parameter
}
}


5. What is the advantage of Encapsulation?
Ans.There are the following advantages of encapsulation in Java.
They are as follows:
A.The encapsulated code is more flexible and easy to change with new requirements.


B.It prevents the other classes from accessing the private fields.
C.Encapsulation allows modifying implemented code without breaking other code who have implemented the code.
D.It keeps the data and codes safe from external inheritance. Thus, Encapsulation helps to
achieve security.
E. It improves the maintainability of the application.


6. How to achieve encapsulation in Java? Give an example.
Ans.Encapsulation is achieved in Java by declaring the instance variables of a class as private,
and providing public getter and setter methods to access and modify the values of these variables. This allows us to control access to the data and ensure that it can only be modified through the methods of the class, rather than directly accessing the instance variables from
outside the class. 
Here's an example to illustrate how encapsulation can be achieved in Java:


public class BankAccount {
private String accountNumber;
private double balance;
public BankAccount(String accountNumber, double balance) {
this.accountNumber = accountNumber;
this.balance = balance;
}
public String getAccountNumber() {
return accountNumber;
}
public void setAccountNumber(String accountNumber) {
this.accountNumber = accountNumber;
}
public double getBalance() {
return balance;
}
public void deposit(double amount) {
balance += amount;
}
public void withdraw(double amount) {
if (amount <= balance) {
balance -= amount;
} else {
System.out.println("Insufficient funds");
}
}
}




Constructor assignment


1. What is a Constructor?
Ans: Constructors are used to initialize the object’s state. Like methods, a constructor also contains a collection of statements(i.e. instructions) that are executed at time of Object creation.


2. What is Constructor Chaining?
Ans: Constructor Chaining is a technique of calling another constructor from one constructor. this() is used to call the same class constructor whereas super() is used to call super class constructor.


3. Can we call a subclass constructor from a superclass constructor?
Ans.No. There is no way in java to call a subclass constructor from a superclass constructor.


4. What happens if you keep a return type for a constructor?
Ans: Ideally, Constructor must not have a return type. By definition, if a method has a return type, it’s not a constructor.(JLS8.8 Declaration) It will be treated as a normal method. But the compiler gives a warning saying that the method has a constructor name.


class Demo
{
int Demo()
{
return 0; // Warning for the return type
}
}


5. What is No-arg constructor?
Ans: Constructor without arguments is called a no arg constructor. Default constructor in java is always a no arg constructor.


class Demo
{
public Demo()
{
//No arg constructor
}
}


6. How is a No-argument constructor different from the default Constructor?
Ans: If a class contains no constructor declarations, then a default constructor with no formal  parameters and no throws clause is implicitly declared. If the class being declared is the primordial class Object, then the default constructor has an empty body. Otherwise, the default constructor simply invokes the superclass constructor with no arguments.


7. When do we need Constructor Overloading?
Ans. Sometimes there is a need to initialize an object in different ways. This can be done using constructor overloading. Different constructors can do different work by implementing different lines of code and are called based on the type and no of parameters passed. According to the
situation , a constructor is called with a specific number of parameters among overloaded constructors.


8. What is Default Constructor
Ans: Default constructor
~For every java class constructor concept is applicable.
~If we don't write any constructor, then the compiler will generate a default constructor.
~If we write at least one constructor then the compiler won't generate any default constructor, so    we say every java class will have a compiler generated default constructor or programmer written constructor but not both simultaneously.
Prototype of default constructor
~There is always no argument constructor.
~The access modifier of the default constructor is the same as the class modifier. [applicable for
public and default]
~Default constructor contains one line, super(). It is a call to super class constructor.






1. Why do we need static keyword in Java Programming?
Ans. The static keyword in Java i used to indicate that a member£belong to a cla rather than an
instance of a cla. Thi mean that the member can be accessed without having to create instance of the class
 Here are some common uses of static in Java:


To create class-level variable that are shared by all instance of a class


To create class-level method that can be called without creating an instance of a class


To create a block of code that is executed when a class is loaded.


In general, static i used to create class level member that are£independent of any specific
instance of a class and can be accessed without creating an instance of the class


In Java, static is a keyword that is used for memory management mainly. Static mean single
copy storage for variable or method
The members that are marked with the static keyword inside a class are called static members.


2. What is class loading and how does the Java program actually executes?
Ans. Class Loading
In Java, class loading is the process of loading class file into the JVM (Java Virtual machine) at
runtime. It is responsible for loading class  from various source, such as the file system,network,
and database, and making them available to the JVM for execution. 
The class loading process in Java is divided into three phase:
loading, linking, and initialization.


Loading. In the loading phase, the classloader locate the class file using the fully qualified class
name, read the class file, and convert it into a Class object. The Class object contain the
metadata of the class, such as the field, method, and constructor.
Linking. In the linking phase, the JVM perform several operation on the Class object, such as
verifying the class file' integrity, resolving symbolic reference, and allocating memory for the class variable.
 Initialization. in the initialization phase, the JVM initialize the class variable with their default
value, and run the class  static initialization block (if any).


3. Can we mark a local variable as static?
Ans. No, we cannot mark a local variable with a static keyword.


4. Why is a static method also called a class method?
Ans. A static method is also called a cla method because it ties to a class rather than an individual instance of a class. Therefore, we need nothing to create an object of the class to call and execute a static method.


5. Why is the static block executed before the main method in java?
Ans. When the dot class file is loaded into memory, a static block is executed. After executing the static block, JVM call the main method to start execution. Therefore, the static block is executed
before the main method.


6. What is the use of static keyword Explain with an example
Ans. The static keyword in Java is used to indicate that a member belongs to a class rather than an instance of a class. This means that the member can be accessed without having to create an instance of the class.
Here is an example that demonstrates the use of the static keyword in
Java:


public class Counter {
private static int count = 0;
public Counter() {
count++;
}
public static int getCount() {
return count;
}
}


7. The difference between a static variable and instance variable is as follows:
Ans.
« A static variable is also called a class variable whereas an instance variable is also called a non static variable.
« Class variables can be accessed inside a static block, instance block, static method, instance
method, and method of the inner class whereas, instance variable can be accessed only inside
the instance members, and method of the inner class.
« Class variable is always resolved during compile time whereas, instance variable is resolved during the runtime.
« Static variables cannot be serialized in Java whereas instance variables can be serialized.




8. Difference between static and non static members of a class
static
« These variables are called “class variables”.
« These variables will get memory in the method area.
« If the value does not change from object to object then we need to use static variables.
« Inside a static area we can access static variables only.
« Static variables are created using static keywords.
Non-statico
« These variables are called “instance variables”.
« These variables will get memory in the heap area.
« If the value changes from object to object then we need to use “non-static” variables.


Practical


1.Create a class that keeps track of the number of instances created. Implement a static
variable and method to accomplish this.
Ans.
public class StaticAssignment {
        private static int instanceCount = 0;


        public StaticAssignment() {
                instanceCount++;
        }


        public static int getInstanceCount() {
                return instanceCount;
        }


        public static void main(String[] args) {
                StaticAssignment c1 = new StaticAssignment();
                StaticAssignment c2 = new StaticAssignment();
                StaticAssignment c3 = new StaticAssignment();
                System.out.println("Number of instances created: " + StaticAssignment.getInstanceCount());
        }
}


2.Write a program and create a constructor with parameters and initialize the variable using a constructor.
Ans.
public class Person implements Externalizable {
        private String name;
        private int age;


        public Person() {
                // Default constructor required for externalization
        }


        public Person(String name, int age) {
                this.name = name;
                this.age = age;
        }


        @Override
        public String toString() {
                return "Person [name=" + name + ", age=" + age + "]";
        }


        @Override
        public void writeExternal(ObjectOutput out) throws IOException {
                out.writeObject(name);
                out.writeObject(age);
        }


        @Override
        public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
                name = (String) in.readObject();
        }


        public static void main(String[] args) throws IOException, ClassNotFoundException {
                Person p1 = new Person("John", 30);


                // Write object to file
                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("person.ser"));
                oos.writeObject(p1);
                oos.close();


                // Read object from file
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream("person.ser"));
                Person p2 = (Person) ois.readObject();
                ois.close();


                System.out.println("Original object: " + p1);
                System.out.println("Deserialized object: " + p2);
        }


}


3.Use a private keyword for a variable and use setter and getter methods to initialize and
print the values.
Ans.
public class Encapsulation {
        // instance variables
        private String name;
        private int age;


        // constructor with parameters
        public Encapsulation(String name, int age) {
                this.name = name;
                this.age = age;
        }


        public String getName() {
                return name;
        }


        public int getAge() {
                return age;
        }


}


class Main {
        public static void main(String[] args) {


                Encapsulation person1 = new Encapsulation("John Doe", 25);


                // accessing instance variables
                System.out.println(person1.getName());
                System.out.println(person1.getAge());
        }
}




4.Write a program to call a method without creating an object of a class.
Ans.
public class StaticMethod {


        public static void run() {
                System.out.println("Static method");
        }


        public static void main(String[] args) {
                StaticMethod.run();
        }
}


5.Write a program which has static block and constructor overloading, initialize variables
using constructors and print it.
Ans.
public class StaticBlock {


        public String name;
        public int age;


        public StaticBlock() {
                System.out.println("No arg constructor");
        }


        public StaticBlock(int age) {
                super();
                this.age = age;
        }


        public StaticBlock(String name) {
                super();
                this.name = name;
        }


        public StaticBlock(String name, int age) {
                super();
                this.name = name;
                this.age = age;
        }


        @Override
        public String toString() {
                return "StaticBlock [name=" + name + ", age=" + age + "]";
        }


        static {
                System.out.println("Static block");
        }


        public static void main(String[] args) {
                StaticBlock block = new StaticBlock(20);
                System.out.println(block.age);
                StaticBlock block2 = new StaticBlock("Kohli");
                System.out.println(block2.name);
                StaticBlock block3 = new StaticBlock("Mahi", 30);
                System.out.println(block3.toString());
        }
}