Linked Lists in Java
Q1. Given a linked list and a key ‘X‘ in, the task is to check if X is present in the linked list or not.
Sol:
public class LinkedList3
{
    Node head;
    class Node
    {
        int data;
        Node next;
        Node(int data)
        {
            this.data=data;
            next = null;
        }
    }
    public void insertNode(int value)
    {
        Node newNode = new Node(value);
        newNode.next=head;
        head = newNode;
    }
    public void disp()
    {
        if(head==null)
        {
            System.out.println("linkedList is empty");
            return;
        }
        Node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.data+" ");
            temp = temp.next;
        }
    }
    public void check1(int ref)
    {
        int flag= 0;
        Node temp = head;
        while  (temp!=null)
        {
            if(temp.data==ref)
            {
                flag=1;
                break;
            }
            temp = temp.next;
        }
        if(flag==1)
        {
            System.out.println("yes");
        }
        else{
            System.out.println("no");
        }


    }
    public static void main(String[] args)
    {
        LinkedList3 list = new LinkedList3();


        list.insertNode(14);
        list.insertNode(21);
        list.insertNode(11);
        list.insertNode(30);
        list.insertNode(10);
        list.disp();
        System.out.println();
        list.check1(14);
}
}


Output
10 30 11 21 14 
Yes


Q2. Insert a node at the given position in a linked list. We are given a pointer to a node, and the new node is inserted after the given node.
Sol:
public class LinkedList3
{
    Node head;
    class Node
    {
        int data;
        Node next;
        Node(int data)
        {
            this.data=data;
            next = null;
        }
    }
    public void insertNode(int newData)
    {
        Node newNode=new Node(newData);
        newNode.next=null;
        Node temp = head;
        if(head==null)
        {
            head = newNode;
        }
        else
        {
          while(temp.next!=null)
           {
            temp = temp.next;
           }
           temp.next=newNode;
        }
    }
    public void insertAtAny(Node pre ,int newdata)
    {
        if(pre ==null)
        {
            System.out.println("Pre cant be null");
            return;
        }
        Node newNode = new Node(newdata);
        newNode.next=pre.next;
        pre.next=newNode;
    }
    public void disp()
    {
        if(head==null)
        {
            System.out.println("linkedList is empty");
            return;
        }
        Node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.data+" ");
            temp = temp.next;
        }
    }
   
    public static void main(String[] args)
    {
        LinkedList3 list = new LinkedList3();


        list.insertNode(1);
        list.insertNode(2);
        list.insertNode(4);
        list.insertNode(5);
        list.insertNode(6);
        list.disp();
        System.out.println();
        list.insertAtAny(list.head.next, 3);
        System.out.println();
        list.disp();
       
}
}






Output:
1 2 4 5 6 
1 2 3 4 5 6


Q3. Given the head of a sorted linked list, delete all duplicates such that each element appears only once.
Return the linked list sorted as well.
Sol:
class NewLink
{
    Node head;
    class Node
    {
        int data;
        Node next;
        Node(int data)
        {
            this.data=data;
            Node next = null;
        }
    }


public void insertt(int newData)
{
    Node newNode = new Node(newData);
    newNode.next=null;
    if(head==null)
    {
        head = newNode;
        return;
    }
    Node temp =  head;
    while(temp.next!=null)
    {
        temp=temp.next;
    }
    temp.next=newNode;
}
public void disp()
{
    if(head==null)
    {
        System.out.println("empty linked list");
    }
    Node temp = head;
    while(temp!=null)
    {
        System.out.print(temp.data+" ");
        temp=temp.next;
    }
}
//checking if there is a duplicacy
public void duplicateEle()
{
   Node temp = head;
   while(temp!=null&&temp.next!=null)
   {
      if(temp.data==temp.next.data)
      {
        temp.next=temp.next.next;


      }
      else
      {
        temp=temp.next;
      }
   
   }
   
   if(head==null)
    {
        System.out.println("empty linked list");
    }
   while(head!=null)
    {
        System.out.print(head.data+" ");
       head=head.next;
    }
}
   
    public static void main(String[] args)
    {
        NewLink list = new NewLink();
        list.insertt(1);
        list.insertt(2);
        list.insertt(3);
        list.insertt(3);
        list.insertt(5);
        list.insertt(5);
        list.insertt(5);
        list.insertt(6);
        list.insertt(7);
        list.insertt(7);
        list.disp();
        System.out.println();
        list.duplicateEle();
       
    }
}


Output:
1 2 3 3 5 5 5 6 7 7 
1 2 3 5 6 7


Q4. Given the head of a singly linked list, return true if it is a palindrome or false
otherwise.
Sol:
import java.util.*;
class NewLink
{
    Node head;
 
    class Node
    {
        int data;
        Node next;
        Node(int data)
        {
            this.data=data;
            Node next = null;
        }
    }
    public void insertt(int newData)
    {
        Node newNode = new Node(newData);
        newNode.next = null;
        Node temp = head;
        if(head==null)
        {
            head = newNode;
        }
        else
        {
           while(temp.next!=null)
           {
            temp=temp.next;
           }
           temp.next=newNode;
        }
    }
    public void disp()
    {
        Node temp=head;
        if(head==null)
        {
            System.out.println("linkedlist is empty");
        }
        else
        {
              while(temp!=null)
              {
                System.out.print(temp.data+" ");
                temp = temp.next;
              }
        }
    }
    //reverse linkedlist
    public Node reverseLL(Node head)
    {
        Node curr = head;
        Node prev = null;
        Node next = null;
        while(curr!=null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
        return head;
    }
   public Boolean ispalindrome(){
   
    if(head==null)
    {
        System.out.println("Linked list is empty");
    }
    Node slwptr= head;
    Node fastptr= head;
   while (fastptr!=null && fastptr.next!=null)
    {
    fastptr=fastptr.next.next;
    slwptr=slwptr.next;
    }
      Node reversehead= reverseLL(slwptr);
     while(reversehead!=null)
     {
    if(reversehead.data==head.data){
        reversehead=reversehead.next;
        head=head.next;
    }
    else{
        return false;
    }
}
    return true;
   }    
    public static void main(String[] args)
    {
        Scanner scan = new Scanner(System.in);
        NewLink list = new NewLink();
        System.out.print("Enter the size of the LinkedList: ");
        int n = scan.nextInt();
        for(int i=1;i<=n;i++)
        {
         list.insertt(scan.nextInt());
        }
        System.out.println(list.ispalindrome());
       // list.disp();
   }


}


Q5. Given two numbers represented by two lists, write a function that returns the sum list. The sum list is a list
representation of the addition of two input numbers.
Sol:


class LinkedList {


  static Node head1, head2;


  static class Node {


      int data;
      Node next;
      Node(int d) {
          data = d;
          next = null;
      }
  }


  void addTwoLists(Node first, Node second) {
      Node start1 = new Node(0);
      start1.next = first;
      Node start2 = new Node(0);
      start2.next = second;


      addPrecedingZeros(start1, start2);
      Node result = new Node(0);
      if (sumTwoNodes(start1.next, start2.next, result) == 1) {
          Node node = new Node(1);
          node.next = result.next;
          result.next = node;
      }
      printList(result.next);
  }


  private int sumTwoNodes(Node first, Node second, Node result) {
      if (first == null) {
          return 0;
      }
      int number = first.data + second.data + sumTwoNodes(first.next, second.next, result);
      Node node = new Node(number % 10);
      node.next = result.next;
      result.next = node;
      return number / 10;
  }
  private void addPrecedingZeros(Node start1, Node start2) {
      Node next1 = start1.next;
      Node next2 = start2.next;
      while (next1 != null && next2 != null) {
          next1 = next1.next;
          next2 = next2.next;
      }
      if (next1 == null && next2 != null) {
          while (next2 != null) {
              Node node = new Node(0);
              node.next = start1.next;
              start1.next = node;
              next2 = next2.next;
          }
      } else if (next2 == null && next1 != null) {
          while (next1 != null) {
              Node node = new Node(0);
              node.next = start2.next;
              start2.next = node;
              next1 = next1.next;
          }
      }
  }


  void printList(Node head) {
      while (head != null) {
          System.out.print(head.data + " ");
          head = head.next;
      }
      System.out.println("");
  }


  public static void main(String[] args) {
      LinkedList list = new LinkedList();


      // creating first list
      list.head1 = new Node(7);
      list.head1.next = new Node(5);
      list.head1.next.next = new Node(9);
      list.head1.next.next.next = new Node(4);
      list.head1.next.next.next.next = new Node(6);
      System.out.print("First List is ");
      list.printList(head1);


      // creating second list
      list.head2 = new Node(8);
      list.head2.next = new Node(4);
      System.out.print("Second List is ");
      list.printList(head2);


      System.out.print("Resultant List is ");
      // add the two lists and see the result
      list.addTwoLists(head1, head2);
  }
}